{
	"info": {
		"_postman_id": "22ade53c-cfac-4c1d-8ae4-8b77b42ab920",
		"name": "Ecommerce helpdesk-commands-service tests",
		"description": "Integration tests with transaction lifecycle polling - requires docker-compose environment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23963988"
	},
	"item": [
		{
			"name": "Request Transaction Refund - Integration Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[ecommerce-helpdesk-commands-service] - Request Transaction Refund - Status code is 202\", function () {\r",
							"    pm.response.to.have.status(202);\r",
							"});\r",
							"\r",
							"const transactionId = pm.environment.get('REFUNDABLE_TRANSACTION_ID');\r",
							"const initialStatus = \"REFUND_ERROR\";\r",
							"const expectedTransactionStatus = \"REFUND_REQUESTED\";\r",
							"\r",
							"const getTransaction = {\r",
							"    url: `${pm.environment.get(\"TRANSACTION_SERVICE_HOST\")}/transactions/${transactionId}`,\r",
							"    method: 'GET',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    }\r",
							"};\r",
							"\r",
							"async function executeGetTransactionRequest() {\r",
							"        const maxAttempts = 10;\r",
							"        var counter = 0;\r",
							"        var transactionStatus = null;\r",
							"        while (counter < maxAttempts && transactionStatus != expectedTransactionStatus) {\r",
							"            await new Promise(r => setTimeout(r, 1000));\r",
							"            await new Promise ((resolve, reject) => pm.sendRequest(getTransaction, (error, response) => {\r",
							"                if (error) {\r",
							"                    console.log(`Error retrieving transaction by id: ${error.code}`);\r",
							"                    reject(error)\r",
							"                } else {\r",
							"                    const responseBody = response.json();\r",
							"                    transactionStatus = responseBody.status;\r",
							"                    console.log(`The transaction status: ${transactionStatus}`)\r",
							"                    resolve(transactionStatus);\r",
							"                }\r",
							"            }));\r",
							"        counter++;\r",
							"    }\r",
							"    return transactionStatus;\r",
							"}\r",
							"\r",
							"pm.test(`[pagopa-ecommerce-helpdesk-commands-service] Check transaction status from ${initialStatus} to ${expectedTransactionStatus}`, async () => {\r",
							"    const transactionStatus = await executeGetTransactionRequest();\r",
							"    pm.expect(expectedTransactionStatus).to.be.eq(transactionStatus);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-User-Id",
						"value": "{{X_USER_ID}}",
						"type": "text"
					},
					{
						"key": "X-Forwarded-For",
						"value": "{{X_FORWARDED_ID}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{HOSTNAME}}/commands/transactions/{{REFUNDABLE_TRANSACTION_ID}}/refund",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"commands",
						"transactions",
						"{{REFUNDABLE_TRANSACTION_ID}}",
						"refund"
					]
				}
			},
			"response": []
		},
		{
			"name": "Resend Transaction Email - Integration Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[ecommerce-helpdesk-commands-service] - Resend Transaction Email - Status code is 202\", function () {\r",
							"    pm.response.to.have.status(202);\r",
							"});\r",
							"\r",
							"const transactionId = pm.environment.get('NOTIFICATION_RESEND_TRANSACTION_ID');\r",
							"const initialStatus = \"NOTIFICATION_REQUESTED\";\r",
							"const expectedTransactionStatuses = [\"NOTIFIED_OK\", \"NOTIFIED_KO\", \"NOTIFICATION_ERROR\"];\r",
							"\r",
							"const getTransaction = {\r",
							"    url: `${pm.environment.get(\"TRANSACTION_SERVICE_HOST\")}/transactions/${transactionId}`,\r",
							"    method: 'GET',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    }\r",
							"};\r",
							"\r",
							"async function executeGetTransactionRequest() {\r",
							"        const maxAttempts = 10;\r",
							"        var counter = 0;\r",
							"        var transactionStatus = null;\r",
							"        while (counter < maxAttempts && !expectedTransactionStatuses.includes(transactionStatus)) {\r",
							"            await new Promise(r => setTimeout(r, 1000));\r",
							"            await new Promise ((resolve, reject) => pm.sendRequest(getTransaction, (error, response) => {\r",
							"                if (error) {\r",
							"                    console.log(`Error retrieving transaction by id: ${error.code}`);\r",
							"                    reject(error)\r",
							"                } else {\r",
							"                    const responseBody = response.json();\r",
							"                    transactionStatus = responseBody.status;\r",
							"                    console.log(`The transaction status: ${transactionStatus}`)\r",
							"                    resolve(transactionStatus);\r",
							"                }\r",
							"            }));\r",
							"        counter++;\r",
							"    }\r",
							"    return transactionStatus;\r",
							"}\r",
							"\r",
							"pm.test(`[pagopa-ecommerce-helpdesk-commands-service] Check transaction status from ${initialStatus} to one of ${expectedTransactionStatuses.join(',')}`, async () => {\r",
							"    const transactionStatus = await executeGetTransactionRequest();\r",
							"    pm.expect(expectedTransactionStatuses).to.include(transactionStatus);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-User-Id",
						"value": "{{X_USER_ID}}",
						"type": "text"
					},
					{
						"key": "X-Forwarded-For",
						"value": "{{X_FORWARDED_ID}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{HOSTNAME}}/commands/transactions/{{NOTIFICATION_RESEND_TRANSACTION_ID}}/resend-email",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"commands",
						"transactions",
						"{{NOTIFICATION_RESEND_TRANSACTION_ID}}",
						"resend-email"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unauthorized for missing api key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[ecommerce-helpdesk-commands-service] - Status code is 401 for missing x-api-key header\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "X-User-Id",
						"value": "{{X_USER_ID}}",
						"type": "text"
					},
					{
						"key": "X-Forwarded-For",
						"value": "{{X_FORWARDED_ID}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{HOSTNAME}}/commands/transactions/{{REFUNDABLE_TRANSACTION_ID}}/refund",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"commands",
						"transactions",
						"{{REFUNDABLE_TRANSACTION_ID}}",
						"refund"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unauthorized for wrong api key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[ecommerce-helpdesk-commands-service] - Status code is 401 for wrong x-api-key header value\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "wrong-key",
							"type": "string"
						},
						{
							"key": "key",
							"value": "x-api-key",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "X-User-Id",
						"value": "{{X_USER_ID}}",
						"type": "text"
					},
					{
						"key": "X-Forwarded-For",
						"value": "{{X_FORWARDED_ID}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{HOSTNAME}}/commands/transactions/{{REFUNDABLE_TRANSACTION_ID}}/refund",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"commands",
						"transactions",
						"{{REFUNDABLE_TRANSACTION_ID}}",
						"refund"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{SERVICE_API_KEY}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}