{
	"info": {
		"_postman_id": "6b74a224-bfe9-4a1f-b4f0-b38b91abbee4",
		"name": "ecommerce pagoPA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "pagopa-ecommerce-sessions-service",
			"item": [
				{
					"name": "Post sessions",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@test.it\",\n    \"rptId\": \"77777777777302000100000019421\",\n    \"paymentToken\": \"a20a8a4c-8126-4aff-8fe6-7e6b8d8cc53a\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/sessions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"sessions"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "pagopa-ecommerce-transactions-service",
			"item": [
				{
					"name": "Create a new transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[pagopa-ecommerce-transactions-service] Status code is 200 with valid response json\", () => {",
									"",
									"  pm.expect(pm.response.code).to.eql(200);  ",
									"  const responseJson = pm.response.json();",
									"",
									"  pm.environment.set(\"TRANSACTION_ID\", responseJson.transactionId);",
									"});",
									"",
									"pm.test(\"[pagopa-ecommerce-transactions-service] Total amount is correct\", () => {",
									"  const responseJson = pm.response.json();",
									"  const totalAmount = _.reduce(responseJson.payments, (partial, p) => {",
									"      return partial + p.amount;",
									"  }, 0);",
									"",
									"  pm.expect(totalAmount).to.be.not.eq(undefined);",
									"  pm.expect(totalAmount).to.be.at.least(0);",
									"",
									"  pm.environment.set(\"TOTAL_AMOUNT\", totalAmount);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJycHRJZCI6Ijc3Nzc3Nzc3Nzc3MzAyMDAwMTAwMDAwMDE5NDIxIiwiZW1haWwiOiJ0ZXN0QHRlc3QuaXQiLCJwYXltZW50VG9rZW4iOiJhMjBhOGE0Yy04MTI2LTRhZmYtOGZlNi03ZTZiOGQ4Y2M1M2EiLCJqdGkiOiI0MzU2MzM3NDI4MTk5MzgifQ.0wd4PwV0Iuo3g_MUqC_REGA4tptWfA0nQx2YTS9txpaIEuvCjPopoxwM3jw4TSV3HhoLe2_MeS6Om8xrYeHNKQ",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"paymentNotices\": [\n        {\n            \"rptId\": \"77777777777302016723749670001\",\n            \"amount\": 120\n        }\n    ],\n    \"email\": \"test@example.com\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/transactions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"transactions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new transaction with cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[pagopa-ecommerce-transactions-service] Status code is 200 with valid response json\", () => {",
									"",
									"  pm.expect(pm.response.code).to.eql(200);  ",
									"  const responseJson = pm.response.json();",
									"",
									"  pm.environment.set(\"TRANSACTION_ID\", responseJson.transactionId);",
									"});",
									"",
									"pm.test(\"[pagopa-ecommerce-transactions-service] Total amount is correct\", () => {",
									"  const responseJson = pm.response.json();",
									"  const totalAmount = _.reduce(responseJson.payments, (partial, p) => {",
									"      return partial + p.amount;",
									"  }, 0);",
									"",
									"  pm.expect(totalAmount != null);",
									"  pm.expect(totalAmount >= 0);",
									"",
									"  pm.environment.set(\"TOTAL_AMOUNT\", totalAmount);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJycHRJZCI6Ijc3Nzc3Nzc3Nzc3MzAyMDAwMTAwMDAwMDE5NDIxIiwiZW1haWwiOiJ0ZXN0QHRlc3QuaXQiLCJwYXltZW50VG9rZW4iOiJhMjBhOGE0Yy04MTI2LTRhZmYtOGZlNi03ZTZiOGQ4Y2M1M2EiLCJqdGkiOiI0MzU2MzM3NDI4MTk5MzgifQ.0wd4PwV0Iuo3g_MUqC_REGA4tptWfA0nQx2YTS9txpaIEuvCjPopoxwM3jw4TSV3HhoLe2_MeS6Om8xrYeHNKQ",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"paymentNotices\": [\n        {\n            \"rptId\": \"77777777777302016723749670001\",\n            \"amount\": 100\n        },\n        {\n            \"rptId\": \"77777777777302016723749670002\",\n            \"amount\": 200\n        }\n    ],\n    \"email\": \"test@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/transactions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"transactions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get transaction info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/transactions/{{TRANSACTION_ID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"transactions",
								"{{TRANSACTION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request authorization",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-PGS-Id",
								"value": "XPAY",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": {{TOTAL_AMOUNT}},\n    \"fee\": 10000,\n    \"paymentInstrumentId\": \"85604a51-bcb7-4759-81f9-c77a8e781f26\",\n    \"pspId\": \"PPAYITR1XXX\",\n    \"language\": \"IT\",\n    \"details\": {\n        \"detailType\": \"postepay\",\n        \"accountEmail\": \"foo@example.com\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/transactions/{{TRANSACTION_ID}}/auth-requests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"transactions",
								"{{TRANSACTION_ID}}",
								"auth-requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update authorization status",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authorizationResult\": \"OK\",\n    \"timestampOperation\": \"2022-07-04T17:17:33+02:00\",\n    \"authorizationCode\": \"OK\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/transactions/{{TRANSACTION_ID}}/auth-requests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"transactions",
								"{{TRANSACTION_ID}}",
								"auth-requests"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "pagopa-ecommerce-payment-instruments-service",
			"item": [
				{
					"name": "Create new payment instrument",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[pagopa-ecommerce-payment-instruments-service] Status code is 200 with valid response json\", () => {",
									"",
									"  pm.expect(pm.response.code).to.eql(200);  ",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.id).to.be.a('string');",
									"  pm.expect(responseJson.id).to.have.length.greaterThan(0);",
									"  pm.environment.set(\"PAYMENT_INSTRUMENT_ID\", responseJson.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"PagoInConto 2\",\n    \"description\" : \"Paga con Conto Corrente\",\n    \"status\" : \"ENABLED\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8083/payment-instruments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8083",
							"path": [
								"payment-instruments"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all payment instruments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[pagopa-ecommerce-payment-instruments-service] Status code is 200 with valid response json\", () => {",
									"",
									"  pm.expect(pm.response.code).to.eql(200);  ",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson[0].id).to.be.a('string');",
									"  pm.expect(responseJson[0].id).to.have.length.greaterThan(0);",
									"  pm.environment.set(\"PAYMENT_INSTRUMENT_ID\", responseJson[0].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8083/payment-methods/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8083",
							"path": [
								"payment-methods",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GET payment-instrument given ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8083/payment-methods/{{PAYMENT_INSTRUMENT_ID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8083",
							"path": [
								"payment-methods",
								"{{PAYMENT_INSTRUMENT_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE status of a payment instrument",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[pagopa-ecommerce-payment-instruments-service] Status code is 200 with valid response json\", () => {",
									"",
									"  pm.expect(pm.response.code).to.eql(200);  ",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.id).to.be.a('string');",
									"  pm.expect(responseJson.id).to.have.length.greaterThan(0);",
									"  pm.environment.set(\"PAYMENT_INSTRUMENT_ID\", responseJson.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\" : \"INCOMING\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8083/payment-instruments/{{PAYMENT_INSTRUMENT_ID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8083",
							"path": [
								"payment-instruments",
								"{{PAYMENT_INSTRUMENT_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "pagopa-notifications-service",
			"item": [
				{
					"name": "Send email",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				}
			]
		}
	]
}