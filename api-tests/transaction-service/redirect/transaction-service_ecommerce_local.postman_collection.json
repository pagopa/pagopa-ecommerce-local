{
	"info": {
		"_postman_id": "2906f30a-19e6-4055-8f66-0acf97e8d1f5",
		"name": "Transaction service for local eCommerce REDIRECT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23963988"
	},
	"item": [
		{
			"name": "Nuova transaction NM3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-transaction-service] Activate new transaction V2 (status code 200)\", () => {",
							"    const responseJson = pm.response.json();",
							"    const transactionId = responseJson.transactionId;",
							"    pm.environment.set(\"TRANSACTION_ID\", transactionId);",
							"    pm.response.to.have.status(200);",
							"    encodeTransactionIdToB64(transactionId);",
							"});",
							"",
							"function encodeTransactionIdToB64(transactionId) {",
							"    const encodedTransactionId = Buffer.from(transactionId, 'hex').toString('base64').replace(/\\+/g, \"-\").replace(/\\//g, \"_\");",
							"    console.log(`Transaction id: [${transactionId}] encoded to [${encodedTransactionId}]`);",
							"    pm.environment.set(\"BASE64_ENCODED_TRANSACTION_ID\", encodedTransactionId);",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const getPaymentMethodRequest = {",
							"    url: `${pm.environment.get(\"HOSTNAME\")}:${pm.environment.get(\"PAYMENT_METHOD_SERVICE_PORT\")}/payment-methods`,",
							"    method: 'GET',",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"        'x-client-id': 'CHECKOUT'",
							"    }",
							"};",
							"",
							"pm.sendRequest(getPaymentMethodRequest, (error, response) => {",
							"    const responseBody = response.json();",
							"    const redirectPaymentMethods = responseBody.paymentMethods.filter(function (paymentMethod) {",
							"        return paymentMethod.methodManagement === \"REDIRECT\";",
							"    });;",
							"",
							"    if (redirectPaymentMethods.length == 0) {",
							"        createPaymentMethod();",
							"    } else {",
							"        pm.environment.set(\"PAYMENT_METHOD_ID\", redirectPaymentMethods[0].id);",
							"    }",
							"});",
							"",
							"function createPaymentMethod() {",
							"    const createPaymentMethodRequestBody = {",
							"        \"name\": \"Paga in conto\",",
							"        \"description\": \"Paga in conto\",",
							"        \"asset\": \"asset\",",
							"        \"status\": \"ENABLED\",",
							"        \"paymentTypeCode\": \"RBPR\",",
							"        \"ranges\": [",
							"            {",
							"                \"min\": 0,",
							"                \"max\": 10000",
							"            }",
							"        ],",
							"        \"clientId\": \"CHECKOUT\",",
							"        \"methodManagement\": \"REDIRECT\"",
							"    };",
							"",
							"    const createPaymentMethodRequest = {",
							"        url: `${pm.environment.get(\"HOSTNAME\")}:${pm.environment.get(\"PAYMENT_METHOD_SERVICE_PORT\")}/payment-methods`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json'",
							"        },",
							"        body: {",
							"            mode: 'raw',",
							"            raw: JSON.stringify(createPaymentMethodRequestBody)",
							"        }",
							"    };",
							"    pm.sendRequest(createPaymentMethodRequest, (error, response) => {",
							"        if (error) {",
							"            console.log(`Create payment method error: ${error}`);",
							"        } else {",
							"            const responseBody = response.json();",
							"            const paymentMethodId = responseBody.id;",
							"            pm.environment.set(\"PAYMENT_METHOD_ID\", paymentMethodId);",
							"        }",
							"    });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-client-id",
						"value": "CHECKOUT",
						"type": "text"
					},
					{
						"key": "x-correlation-id",
						"value": "{{CORRELATION_ID}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{EMAIL}}\",\n    \"paymentNotices\": [{\n        \"rptId\": \"{{RPT_ID}}\",\n        \"amount\": {{AMOUNT}}\n    }],\n    \"orderId\": \"{{ORDER_ID}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}:{{TRANSACTION_SERVICE_PORT}}/v2/transactions",
					"host": [
						"{{HOSTNAME}}"
					],
					"port": "{{TRANSACTION_SERVICE_PORT}}",
					"path": [
						"v2",
						"transactions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request authorization for payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-transaction-service] Request authorization from REDIRECT (status code 200)\", function() {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.authorizationUrl).to.be.a(\"string\");",
							"    pm.environment.set(\"PSP_TRANSACTION_ID\", response.authorizationRequestId);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{AUTH_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "deployment",
						"value": "{{DEPLOYMENT_TRANSACTION_SERVICE}}",
						"type": "text"
					},
					{
						"key": "x-pgs-id",
						"value": "REDIRECT",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": {{AMOUNT}},\n    \"fee\": {{FEE}},\n    \"paymentInstrumentId\": \"{{PAYMENT_METHOD_ID}}\",\n    \"pspId\": \"REDIRECT\",\n    \"isAllCCP\": false,\n    \"language\": \"IT\",\n    \"details\": {\n        \"detailType\": \"redirect\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}:{{TRANSACTION_SERVICE_PORT}}/transactions/{{TRANSACTION_ID}}/auth-requests",
					"host": [
						"{{HOSTNAME}}"
					],
					"port": "{{TRANSACTION_SERVICE_PORT}}",
					"path": [
						"transactions",
						"{{TRANSACTION_ID}}",
						"auth-requests"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authorization completed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-transaction-service] Authorization completed POST notify REDIRECT (status code 200)\", function() {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.status).to.be.oneOf([\"CLOSURE_REQUESTED\",\"CLOSED\"]);",
							"    pm.expect(response.transactionId).to.be.eq(pm.environment.get(\"TRANSACTION_ID\"));",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{AUTH_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "deployment",
						"value": "{{DEPLOYMENT_TRANSACTION_SERVICE}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"timestampOperation\": \"2023-10-10T18:16:01.6880000+00:00\",\n  \"outcomeGateway\": {\n    \"paymentGatewayType\": \"REDIRECT\",\n    \"pspTransactionId\": \"{{PSP_TRANSACTION_ID}}\",\n    \"pspId\": \"REDIRECT\",\n    \"outcome\": \"OK\",\n    \"authorizationCode\": \"000\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}:{{TRANSACTION_SERVICE_PORT}}/transactions/{{BASE64_ENCODED_TRANSACTION_ID}}/auth-requests",
					"host": [
						"{{HOSTNAME}}"
					],
					"port": "{{TRANSACTION_SERVICE_PORT}}",
					"path": [
						"transactions",
						"{{BASE64_ENCODED_TRANSACTION_ID}}",
						"auth-requests"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add user receipt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-transaction-service] Add user receipt (status code 200)\", function() {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.outcome).to.be.eq(\"OK\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const getTransaction = {",
							"    url: `${pm.environment.get(\"HOSTNAME\")}:${pm.environment.get(\"TRANSACTION_SERVICE_PORT\")}/transactions/${pm.environment.get(\"TRANSACTION_ID\")}`,",
							"    method: 'GET',",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    }",
							"};",
							"",
							"const maxIteration = 10;",
							"const timeoutBetweenAttemptsMillis = 1000;",
							"",
							"let lastTransactionStatus;",
							"",
							"pm.sendRequest(getTransaction, (error, response) => {",
							"    if (error) {",
							"        console.log(`Error while retrieving transaction status: ${error.code}`);",
							"        endPolling = true;",
							"    } else {",
							"        const responseBody = response.json();",
							"        lastTransactionStatus = responseBody.status;",
							"        console.log(`Transaction status: ${lastTransactionStatus}`);",
							"        if (lastTransactionStatus != \"CLOSED\") {",
							"            pollTransactionStatus();",
							"        }",
							"    }",
							"});",
							"async function pollTransactionStatus() {",
							"    let endPolling = false;",
							"    let currentIteration = 0;",
							"    console.log(\"Start polling transaction service to wait for transaction status to become CLOSED\");",
							"    while (!endPolling) {",
							"        getTransactionStatus();",
							"        currentIteration++;",
							"        endPolling = lastTransactionStatus == \"CLOSED\" || currentIteration == maxIteration;",
							"        console.log(`Transaction status: ${lastTransactionStatus}, current iteration: ${currentIteration}, max iteration: ${maxIteration}, end polling: ${endPolling}`);",
							"        if (!endPolling) {",
							"            await new Promise(r => setTimeout(r, timeoutBetweenAttemptsMillis));",
							"        }",
							"",
							"    }",
							"",
							"    function getTransactionStatus() {",
							"        pm.sendRequest(getTransaction, (error, response) => {",
							"            if (error) {",
							"                console.log(`Error while retrieving transaction status: ${error.code}`);",
							"                throw error;",
							"            } else {",
							"                const responseBody = response.json();",
							"                lastTransactionStatus = responseBody.status",
							"            }",
							"        }",
							"        );",
							"    }",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{AUTH_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "deployment",
						"value": "{{DEPLOYMENT_TRANSACTION_SERVICE}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"outcome\": \"OK\",\n    \"paymentDate\": \"2023-01-01T00:00:00.000Z\",\n    \"payments\": [\n        {\n            \"paymentToken\": \"paymentToken\",\n            \"description\": \"description\",\n            \"creditorReferenceId\": \"creditorReferenceId\",\n            \"fiscalCode\": \"fiscalCode\",\n            \"companyName\": \"companyName\",\n            \"officeName\": \"officeName\",\n            \"debtor\": \"debtor\"\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}:{{TRANSACTION_SERVICE_PORT}}/transactions/{{TRANSACTION_ID}}/user-receipts",
					"host": [
						"{{HOSTNAME}}"
					],
					"port": "{{TRANSACTION_SERVICE_PORT}}",
					"path": [
						"transactions",
						"{{TRANSACTION_ID}}",
						"user-receipts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get transaction by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-transaction-service] Get transaction by id (status code 200) for REDIRECT transaction\", () => {",
							"  const responseJson = pm.response.json();",
							"  pm.expect(responseJson.transactionId).to.be.a('string');",
							"  pm.expect(responseJson.transactionId).to.be.eq(pm.environment.get(\"TRANSACTION_ID\"));",
							"  pm.expect(responseJson.status).to.be.oneOf([\"NOTIFICATION_REQUESTED\",\"NOTIFIED_OK\"]);",
							"  pm.expect(responseJson.gateway).to.be.eq(\"REDIRECT\");",
							"  pm.expect(responseJson.sendPaymentResultOutcome).to.be.eq(\"OK\");",
							"  pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HOSTNAME}}:{{TRANSACTION_SERVICE_PORT}}/transactions/{{TRANSACTION_ID}}",
					"host": [
						"{{HOSTNAME}}"
					],
					"port": "{{TRANSACTION_SERVICE_PORT}}",
					"path": [
						"transactions",
						"{{TRANSACTION_ID}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}