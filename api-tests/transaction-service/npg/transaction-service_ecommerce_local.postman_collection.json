{
	"info": {
		"_postman_id": "a41d9f1c-750d-4f71-b6b0-e565e540c783",
		"name": "Transaction service for local eCommerce NPG",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23963988"
	},
	"item": [
		{
			"name": "Nuova transaction NM3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-transaction-service] Activate new transaction V2 (status code 200)\", () => {",
							"    const responseJson = pm.response.json();",
							"    const transactionId = responseJson.transactionId;",
							"    pm.environment.set(\"TRANSACTION_ID\", transactionId);",
							"    pm.response.to.have.status(200);",
							"    encodeTransactionIdToB64(transactionId);",
							"    pm.environment.set(\"ACTIVATION_PAYMENT_NOTICES\", JSON.stringify(responseJson.payments));",
							"});",
							"",
							"function encodeTransactionIdToB64(transactionId) {",
							"    const encodedTransactionId = Buffer.from(transactionId, 'hex').toString('base64').replace(/\\+/g, \"-\").replace(/\\//g, \"_\");",
							"    console.log(`Transaction id: [${transactionId}] encoded to [${encodedTransactionId}]`);",
							"    pm.environment.set(\"BASE64_ENCODED_TRANSACTION_ID\", encodedTransactionId);",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const getPaymentMethodRequest = {",
							"    url: `${pm.environment.get(\"HOSTNAME\")}:${pm.environment.get(\"PAYMENT_METHOD_SERVICE_PORT\")}/payment-methods`,",
							"    method: 'GET',",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"        'x-client-id': 'CHECKOUT'",
							"    }",
							"};",
							"",
							"pm.sendRequest(getPaymentMethodRequest, (error, response) => {",
							"    if (error) {",
							"        console.log(`Error retrieving payment methods: ${error.code}`);",
							"    } else {",
							"        const responseBody = response.json();",
							"        const paymentMethods = responseBody.paymentMethods;",
							"        if (paymentMethods.length == 0) {",
							"            createSessionWithNewPaymentMethod();",
							"        } else {",
							"            const paymentMethodId = responseBody.paymentMethods[0].id;",
							"            pm.environment.set(\"PAYMENT_METHOD_ID\", paymentMethodId);",
							"            createSession(paymentMethodId);",
							"        }",
							"    }",
							"});",
							"",
							"function createSessionWithNewPaymentMethod() {",
							"    const createPaymentMethodRequestBody = {",
							"        \"name\": \"CARDS\",",
							"        \"description\": \"description\",",
							"        \"asset\": \"asset\",",
							"        \"status\": \"ENABLED\",",
							"        \"paymentTypeCode\": \"CP\",",
							"        \"ranges\": [",
							"            {",
							"                \"min\": 0,",
							"                \"max\": 10000",
							"            }",
							"        ],",
							"        \"clientId\": \"CHECKOUT\",",
							"        \"methodManagement\": \"ONBOARDABLE\"",
							"    };",
							"",
							"    const createPaymentMethodRequest = {",
							"        url: `${pm.environment.get(\"HOSTNAME\")}:${pm.environment.get(\"PAYMENT_METHOD_SERVICE_PORT\")}/payment-methods`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json'",
							"        },",
							"        body: {",
							"            mode: 'raw',",
							"            raw: JSON.stringify(createPaymentMethodRequestBody)",
							"        }",
							"    };",
							"    pm.sendRequest(createPaymentMethodRequest, (error, response) => {",
							"        if (error) {",
							"            console.log(`Create payment method error: ${error.code}`);",
							"        } else {",
							"            const responseBody = response.json();",
							"            const paymentMethodId = responseBody.id;",
							"            pm.environment.set(\"PAYMENT_METHOD_ID\", paymentMethodId);",
							"            createSession(paymentMethodId);",
							"        }",
							"    });",
							"}",
							"",
							"function createSession(paymentMethodId) {",
							"    const createSession = {",
							"        url: `${pm.environment.get(\"HOSTNAME\")}:${pm.environment.get(\"PAYMENT_METHOD_SERVICE_PORT\")}/payment-methods/${paymentMethodId}/sessions`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json'",
							"        },",
							"        body: {",
							"            mode: 'raw',",
							"            raw: ''",
							"        }",
							"    };",
							"",
							"    pm.sendRequest(createSession, (error, response) => {",
							"        if (error) {",
							"            console.log(`Create session error: ${error.code}`);",
							"        } else {",
							"            const responseBody = response.json();",
							"            pm.environment.set(\"ORDER_ID\", responseBody.orderId);",
							"            pm.environment.set(\"CORRELATION_ID\", responseBody.correlationId);",
							"        }",
							"    });",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-client-id",
						"value": "CHECKOUT",
						"uuid": "32f38387-a565-4784-b717-15fdbe46aa2e"
					},
					{
						"key": "x-correlation-id",
						"value": "{{CORRELATION_ID}}",
						"uuid": "8ff9452e-b8f0-43de-a271-e7141b086956"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{EMAIL}}\",\n    \"paymentNotices\": [{\n        \"rptId\": \"{{RPT_ID}}\",\n        \"amount\": {{AMOUNT}}\n    }],\n    \"orderId\": \"{{ORDER_ID}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}:{{TRANSACTION_SERVICE_PORT}}/v2/transactions",
					"host": [
						"{{HOSTNAME}}"
					],
					"port": "{{TRANSACTION_SERVICE_PORT}}",
					"path": [
						"v2",
						"transactions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request authorization for payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-transaction-service] Request authorization from NPG (status code 200)\", function() {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.authorizationUrl).to.be.a(\"string\");",
							"    pm.expect(response.authorizationRequestId).to.be.eq(pm.environment.get(\"ORDER_ID\"));",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{AUTH_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "deployment",
						"value": "{{DEPLOYMENT_TRANSACTION_SERVICE}}",
						"uuid": "4826fa46-73b5-4d62-9e62-0d8ee75b7fb8"
					},
					{
						"key": "x-pgs-id",
						"value": "NPG",
						"uuid": "b6b23e5d-43f5-441e-8127-6b93731228c0"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": {{AMOUNT}},\n    \"fee\": {{FEE}},\n    \"paymentInstrumentId\": \"{{PAYMENT_METHOD_ID}}\",\n    \"pspId\": \"{{PSP_ID}}\",\n    \"isAllCCP\": false,\n    \"language\": \"IT\",\n    \"details\": {\n        \"detailType\": \"cards\",\n        \"orderId\": \"{{ORDER_ID}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}:{{TRANSACTION_SERVICE_PORT}}/transactions/{{TRANSACTION_ID}}/auth-requests",
					"host": [
						"{{HOSTNAME}}"
					],
					"port": "{{TRANSACTION_SERVICE_PORT}}",
					"path": [
						"transactions",
						"{{TRANSACTION_ID}}",
						"auth-requests"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authorization completed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-transaction-service] Authorization completed POST notify NPG (status code 200)\", function() {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.status).to.be.eq(\"CLOSURE_REQUESTED\");",
							"    pm.expect(response.transactionId).to.be.eq(pm.environment.get(\"TRANSACTION_ID\"));",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{AUTH_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "deployment",
						"value": "{{DEPLOYMENT_TRANSACTION_SERVICE}}",
						"uuid": "1992b416-2bd0-4e5b-95d1-100df87ead59"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"timestampOperation\": \"2023-09-14T14:57:22.605Z\",\n  \"outcomeGateway\": {\n    \"paymentGatewayType\": \"NPG\",\n    \"operationResult\": \"EXECUTED\",\n    \"orderId\": \"btid2384983\",\n    \"operationId\": \"3470744\",\n    \"authorizationCode\": \"647189\",\n    \"paymentEndToEndId\": \"e723hedsdew\",\n    \"rrn\": \"rrn\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}:{{TRANSACTION_SERVICE_PORT}}/transactions/{{BASE64_ENCODED_TRANSACTION_ID}}/auth-requests",
					"host": [
						"{{HOSTNAME}}"
					],
					"port": "{{TRANSACTION_SERVICE_PORT}}",
					"path": [
						"transactions",
						"{{BASE64_ENCODED_TRANSACTION_ID}}",
						"auth-requests"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add user receipt",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const activationPaymentNotices = JSON.parse(pm.environment.get(\"ACTIVATION_PAYMENT_NOTICES\"));",
							"",
							"const addUserReceiptRequest = {",
							"    outcome: \"OK\",",
							"    paymentDate: \"2023-01-01T00:00:00.000Z\",",
							"    payments: Array.from(activationPaymentNotices).map(p =>({",
							"      paymentToken: p.paymentToken,",
							"      description: p.reason,",
							"      creditorReferenceId: \"creditorReferenceId\",",
							"      fiscalCode: \"fiscalCode\",",
							"      companyName: \"companyName\",",
							"      officeName: \"officeName\",",
							"      debtor: \"debtor\"",
							"    }))",
							"}",
							"",
							"pm.environment.set(\"ADD_USER_RECEIPT_REQUEST\", JSON.stringify(addUserReceiptRequest));",
							"",
							"const getTransaction = {",
							"    url: `${pm.environment.get(\"HOSTNAME\")}:${pm.environment.get(\"TRANSACTION_SERVICE_PORT\")}/transactions/${pm.environment.get(\"TRANSACTION_ID\")}`,",
							"    method: 'GET',",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    }",
							"};",
							"",
							"executeGetTransactionRequest()",
							"",
							"",
							"async function executeGetTransactionRequest (){",
							"        const maxAttempts = 10;",
							"        var counter = 0;",
							"        var transactionStatus = null;",
							"        while (counter < maxAttempts && transactionStatus != \"CLOSED\") {",
							"            await new Promise(r => setTimeout(r, 1000));",
							"            await new Promise ((resolve, reject) => pm.sendRequest(getTransaction, (error, response) => {",
							"                if (error) {",
							"                    console.log(`Error retrieving transaction by id: ${error.code}`);",
							"                    reject(error)",
							"                } else {",
							"                    const responseBody = response.json();",
							"                    transactionStatus = responseBody.status;",
							"                    console.log(`The transaction status: ${transactionStatus}`)",
							"                    resolve(transactionStatus);",
							"                }",
							"            }));",
							"        counter++;",
							"    }",
							"",
							"}",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-transaction-service] Add user receipt (status code 200)\", function() {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.outcome).to.be.eq(\"OK\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{AUTH_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "deployment",
						"value": "{{DEPLOYMENT_TRANSACTION_SERVICE}}",
						"uuid": "7cb5f2d9-418d-4d68-80ff-86f7af76a140"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{ADD_USER_RECEIPT_REQUEST}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}:{{TRANSACTION_SERVICE_PORT}}/transactions/{{TRANSACTION_ID}}/user-receipts",
					"host": [
						"{{HOSTNAME}}"
					],
					"port": "{{TRANSACTION_SERVICE_PORT}}",
					"path": [
						"transactions",
						"{{TRANSACTION_ID}}",
						"user-receipts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get transaction by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-transaction-service] Get transaction by id (status code 200) for NPG transaction\", () => {",
							"  const responseJson = pm.response.json();",
							"  pm.expect(responseJson.transactionId).to.be.a('string');",
							"  pm.expect(responseJson.transactionId).to.be.eq(pm.environment.get(\"TRANSACTION_ID\"));",
							"  pm.expect(responseJson.status).to.be.oneOf([\"NOTIFICATION_REQUESTED\",\"NOTIFIED_OK\",\"NOTIFICATION_ERROR\"]);",
							"  pm.expect(responseJson.gateway).to.be.eq(\"NPG\");",
							"  pm.expect(responseJson.sendPaymentResultOutcome).to.be.eq(\"OK\");",
							"  pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HOSTNAME}}:{{TRANSACTION_SERVICE_PORT}}/transactions/{{TRANSACTION_ID}}",
					"host": [
						"{{HOSTNAME}}"
					],
					"port": "{{TRANSACTION_SERVICE_PORT}}",
					"path": [
						"transactions",
						"{{TRANSACTION_ID}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}