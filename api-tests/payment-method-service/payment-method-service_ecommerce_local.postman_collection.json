{
	"info": {
		"_postman_id": "3742432d-96c0-4c74-b18b-5d2267cc1e70",
		"name": "Payment methods for local eCommerce",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29036441"
	},
	"item": [
		{
			"name": "Create new payment method for IO",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-payment-method-service] Create a new payment methods\", () => {",
							"",
							"  pm.expect(pm.response.code).to.eql(200);  ",
							"  const responseJson = pm.response.json();",
							"  pm.expect(responseJson.id).to.be.a('string');",
							"  pm.expect(responseJson.id).to.have.length.greaterThan(0);",
							"  pm.environment.set(\"PAYMENT_METHOD_ID_IO\", responseJson.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"CARDS\",\n    \"description\": \"description\",\n    \"asset\": \"asset\",\n    \"status\": \"ENABLED\",\n    \"paymentTypeCode\": \"CP\",\n    \"clientId\" : \"IO\",\n    \"ranges\": [\n        {\n            \"min\": 0,\n            \"max\": 10000\n        }\n    ],\n    \"methodManagement\": \"ONBOARDABLE\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/payment-methods",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"payment-methods"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new payment method for checkout",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-payment-method-service] Create a new payment methods\", () => {",
							"",
							"  pm.expect(pm.response.code).to.eql(200);  ",
							"  const responseJson = pm.response.json();",
							"  pm.expect(responseJson.id).to.be.a('string');",
							"  pm.expect(responseJson.id).to.have.length.greaterThan(0);",
							"  pm.environment.set(\"PAYMENT_METHOD_ID_CHECKOUT\", responseJson.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"CARDS\",\n    \"description\": \"description\",\n    \"asset\": \"asset\",\n    \"status\": \"ENABLED\",\n    \"paymentTypeCode\": \"CP\",\n    \"clientId\" : \"CHECKOUT\",\n    \"ranges\": [\n        {\n            \"min\": 0,\n            \"max\": 10000\n        }\n    ],\n    \"methodManagement\": \"ONBOARDABLE\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/payment-methods",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"payment-methods"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get payment method for IO",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-payment-method-service] Get existing payment method response (status code is 200)\", () => {",
							"pm.expect(pm.response.code).to.eql(200);  ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-client-id",
						"value": "IO",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{HOSTNAME}}/payment-methods",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"payment-methods"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get payment method for  checkout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-payment-method-service] Get existing payment method response (status code is 200)\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);  ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-client-id",
						"value": "CHECKOUT",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{HOSTNAME}}/payment-methods",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"payment-methods"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get payment method by id for Checkout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-payment-method-service] Get existing payment method response (status code is 200)\", () => {",
							"  const responseJson = pm.response.json();",
							"  const expectedPaymentMehtodKeys = new Set([\"asset\",\"description\",\"id\",\"name\",\"paymentTypeCode\",\"ranges\",\"status\", \"methodManagement\"]);",
							"  pm.expect(responseJson).to.satisfy(method => Object.keys(method).every(property => expectedPaymentMehtodKeys.has(property)));",
							"  pm.expect(pm.response.code).to.eql(200);  ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-client-id",
						"value": "CHECKOUT",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{HOSTNAME}}/payment-methods/{{PAYMENT_METHOD_ID_CHECKOUT}}",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"payment-methods",
						"{{PAYMENT_METHOD_ID_CHECKOUT}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get payment method by id for IO",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-payment-method-service] Get existing payment method response (status code is 200)\", () => {",
							"  const responseJson = pm.response.json();",
							"  const expectedPaymentMehtodKeys = new Set([\"asset\",\"description\",\"id\",\"name\",\"paymentTypeCode\",\"ranges\",\"status\",\"methodManagement\"]);",
							"  pm.expect(responseJson).to.satisfy(method => Object.keys(method).every(property => expectedPaymentMehtodKeys.has(property)));",
							"  pm.expect(pm.response.code).to.eql(200);  ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-client-id",
						"type": "text",
						"value": "IO"
					}
				],
				"url": {
					"raw": "{{HOSTNAME}}/payment-methods/{{PAYMENT_METHOD_ID_IO}}",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"payment-methods",
						"{{PAYMENT_METHOD_ID_IO}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get payment method by id not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-payment-method-service] Get not existing payment method (status code is 404)\", () => {",
							"  const responseJson = pm.response.json();",
							"  const expectedProblemJsonKeys = new Set([\"detail\",\"status\",\"title\"]);",
							"  pm.expect(responseJson).to.satisfy(element => Object.keys(element).every(property => expectedProblemJsonKeys.has(property)));",
							"  pm.expect(pm.response.code).to.eql(404);  ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-client-id",
						"value": "IO",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{HOSTNAME}}/payment-methods/8de099bf-b453-49af-bc47-1c0f530f8e24",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"payment-methods",
						"8de099bf-b453-49af-bc47-1c0f530f8e24"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create session",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-payment-method-service] Create new NPG session (status code is 200)\", () => {",
							"",
							"  pm.expect(pm.response.code).to.eql(200);  ",
							"  const responseJson = pm.response.json();",
							"  pm.expect(responseJson.orderId).to.be.a('string').and.satisfy(orderId => orderId.startsWith('E') && orderId.length == 18);",
							"  pm.expect(responseJson.orderId).to.have.length.greaterThan(0);",
							"  pm.environment.set(\"ORDER_ID\", responseJson.orderId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{HOSTNAME}}/payment-methods/{{PAYMENT_METHOD_ID_CHECKOUT}}/sessions",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"payment-methods",
						"{{PAYMENT_METHOD_ID_CHECKOUT}}",
						"sessions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get card data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-payment-method-service] Retrieve card data by order id (status code is 200)\", () => {",
							"  const responseJson = pm.response.json();",
							"  pm.expect(responseJson.bin).to.be.a('string');",
							"  pm.expect(responseJson.bin).to.have.length.greaterThan(0);",
							"  pm.expect(pm.response.code).to.eql(200);  ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HOSTNAME}}/payment-methods/{{PAYMENT_METHOD_ID_CHECKOUT}}/sessions/{{ORDER_ID}}",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"payment-methods",
						"{{PAYMENT_METHOD_ID_CHECKOUT}}",
						"sessions",
						"{{ORDER_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get card data with invalid orderId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-payment-method-service] Retrieve card data with invalid order id (status code is 404)\", () => {",
							"  const responseJson = pm.response.json();",
							"  const expectedProblemJsonKeys = new Set([\"detail\",\"status\",\"title\"]);",
							"  pm.expect(responseJson).to.satisfy(element => Object.keys(element).every(property => expectedProblemJsonKeys.has(property)));",
							"  pm.expect(pm.response.code).to.eql(404);  ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HOSTNAME}}/payment-methods/{{PAYMENT_METHOD_ID_CHECKOUT}}/sessions/invalidOrderId",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"payment-methods",
						"{{PAYMENT_METHOD_ID_CHECKOUT}}",
						"sessions",
						"invalidOrderId"
					]
				}
			},
			"response": []
		}
	]
}