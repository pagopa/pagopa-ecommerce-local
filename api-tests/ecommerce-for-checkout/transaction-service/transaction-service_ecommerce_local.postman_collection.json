{
	"info": {
		"_postman_id": "8551fcb3-32fc-4498-856c-bbc60335af00",
		"name": "Transaction service for local eCommerce",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24209240"
	},
	"item": [
		{
			"name": "Create new payment method",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-payment-method-service] Create a new payment methods\", () => {",
							"",
							"  pm.expect(pm.response.code).to.eql(200);  ",
							"  const responseJson = pm.response.json();",
							"  pm.expect(responseJson.id).to.be.a('string');",
							"  pm.expect(responseJson.id).to.have.length.greaterThan(0);",
							"  pm.environment.set(\"PAYMENT_METHOD_ID\", responseJson.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"CARDS\",\n    \"description\": \"description\",\n    \"asset\": \"asset\",\n    \"status\": \"ENABLED\",\n    \"paymentTypeCode\": \"CP\",\n    \"ranges\": [\n        {\n            \"min\": 0,\n            \"max\": 10000\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}:{{PAYMENT_METHOD_SERVICE_PORT}}/payment-methods",
					"host": [
						"{{HOSTNAME}}"
					],
					"port": "{{PAYMENT_METHOD_SERVICE_PORT}}",
					"path": [
						"payment-methods"
					]
				}
			},
			"response": []
		},
		{
			"name": "Nuova transaction NM3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-transaction-service] Activate new transaction (status code 200)\", () => {",
							"  const responseJson = pm.response.json();",
							"  pm.environment.set(\"TRANSACTION_ID\", responseJson.transactionId);",
							"  pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-client-id",
						"value": "CHECKOUT",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{EMAIL}}\",\n    \"paymentNotices\": [{\n        \"rptId\": \"{{RPT_ID}}\",\n        \"amount\": {{AMOUNT}}\n    }]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}:{{TRANSACTION_SERVICE_PORT}}/transactions",
					"host": [
						"{{HOSTNAME}}"
					],
					"port": "{{TRANSACTION_SERVICE_PORT}}",
					"path": [
						"transactions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create NPG session",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-payment-method-service] Create new NPG session (status code is 200)\", () => {",
							"",
							"  pm.expect(pm.response.code).to.eql(200);  ",
							"  const responseJson = pm.response.json();",
							"  pm.expect(responseJson.sessionId).to.be.a('string');",
							"  pm.expect(responseJson.sessionId).to.have.length.greaterThan(0);",
							"  pm.environment.set(\"SESSION_ID\", responseJson.sessionId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{HOSTNAME}}:{{PAYMENT_METHOD_SERVICE_PORT}}/payment-methods/{{PAYMENT_METHOD_ID}}/sessions",
					"host": [
						"{{HOSTNAME}}"
					],
					"port": "{{PAYMENT_METHOD_SERVICE_PORT}}",
					"path": [
						"payment-methods",
						"{{PAYMENT_METHOD_ID}}",
						"sessions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request authorization for payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[pagopa-ecommerce-transaction-service] Request authorization from NPG (status code 200)\", function() {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.authorizationUrl).to.be.a(\"string\");",
							"    pm.expect(response.authorizationRequestId).to.be.a(\"string\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{AUTH_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "deployment",
						"value": "{{DEPLOYMENT_TRANSACTION_SERVICE}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": {{AMOUNT}},\n    \"fee\": {{FEE}},\n    \"paymentInstrumentId\": \"{{PAYMENT_METHOD_ID}}\",\n    \"pspId\": \"{{PSP_ID}}\",\n    \"isAllCCP\": false,\n    \"language\": \"IT\",\n    \"details\": {\n        \"detailType\": \"cards\",\n        \"sessionId\": \"{{SESSION_ID}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}:{{TRANSACTION_SERVICE_PORT}}/transactions/{{TRANSACTION_ID}}/auth-requests",
					"host": [
						"{{HOSTNAME}}"
					],
					"port": "{{TRANSACTION_SERVICE_PORT}}",
					"path": [
						"transactions",
						"{{TRANSACTION_ID}}",
						"auth-requests"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}