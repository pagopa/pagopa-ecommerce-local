version: "3.9"

services:

  mongo:
    container_name: pagopa-ecommerce-mongo
    image: mongo
    env_file: mongodb/mongodb.env
    ports:
      - "${MONGO_PORT}:27017"
    networks:
      - pagopa-ecommerce-net
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin --username admin --password password --quiet | grep 1
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 20s
    entrypoint:
      - bash
      - -c
      - |
          openssl rand -base64 756 > /data/replica.key 
          chmod 400 /data/replica.key
          chown 999:999 /data/replica.key
          exec docker-entrypoint.sh mongod --replSet rs0 --bind_ip_all --port 27017 --keyFile /data/replica.key

  mongo-init:
    container_name: mongo-init
    image: alpine/mongosh
    # connects to the mongo service and runs the script.
    # it run once and then exit
    command: mongosh --host pagopa-ecommerce-mongo --port 27017 --username admin --password password --file /scripts/mongo-init.js
    volumes:
      - ./mongodb/mongo-init.js:/scripts/mongo-init.js:ro
    networks:
      - pagopa-ecommerce-net
    depends_on:
      mongo:
        condition: service_healthy

  mongo-express:
    container_name: pagopa-ecommerce-mongo-express
    image: mongo-express
    env_file: mongodb/mongo-express.env
    ports:
      - "${MONGO_EXPRESS_PORT}:8081"
    networks:
      - pagopa-ecommerce-net
    depends_on:
      mongo-init:
        condition: service_completed_successfully

  redis:
    container_name: pagopa-ecommerce-redis
    image: redis
    env_file: redis/redis.env
    command: ["sh", "-c", 'exec redis-server --requirepass "$$REDIS_PASSWORD"']
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - pagopa-ecommerce-net

  redis-insight:
    container_name: pagopa-ecommerce-redis-insight
    image: redislabs/redisinsight
    ports:
      - "${REDIS_INSIGHT_PORT}:5540"
    networks:
      - pagopa-ecommerce-net

  pagopa-node-mock:
    container_name: pagopa-node-mock
    build:
      context: .
      args:
        NODO_MOCK_COMMIT_SHA: ${NODO_MOCK_COMMIT_SHA}
      dockerfile: nodo-mock/Dockerfile.nodo-mock
    env_file: nodo-mock/nodo-mock.env
    ports:
        - "${NODO_MOCK_PORT}:3002"
    networks:
      - pagopa-ecommerce-net    

  pagopa-ecommerce-transactions-service:
    container_name: pagopa-ecommerce-transactions-service
    env_file: pagopa-ecommerce-transactions-service/transactions-service.env
    build:
      context: .
      secrets:
        - GITHUB_TOKEN
      args:
        ECOMMERCE_TRANSACTIONS_COMMIT_SHA: ${ECOMMERCE_TRANSACTIONS_COMMIT_SHA}
      dockerfile: pagopa-ecommerce-transactions-service/Dockerfile.transactions-service
    ports:
        - "${ECOMMERCE_TRANSACTIONS_PORT}:8080"
    networks:
      - pagopa-ecommerce-net
    depends_on:
      mongo-init:
        condition: service_completed_successfully

  pagopa-ecommerce-payment-methods-service:
    container_name: pagopa-ecommerce-payment-methods-service
    env_file: pagopa-ecommerce-payment-methods-service/payment-methods-service.env
    build:
      context: .
      secrets:
        - GITHUB_TOKEN
      args:
        ECOMMERCE_PAYMENT_METHODS_COMMIT_SHA: ${ECOMMERCE_PAYMENT_METHODS_COMMIT_SHA}
      dockerfile: pagopa-ecommerce-payment-methods-service/Dockerfile.payment-methods-service
    ports:
        - "${ECOMMERCE_PAYMENT_METHODS_PORT}:8080"
    networks:
      - pagopa-ecommerce-net
    depends_on:
      mongo-init:
        condition: service_completed_successfully

  pagopa-ecommerce-event-dispatcher-service:
    container_name: pagopa-ecommerce-event-dispatcher-service
    env_file: pagopa-ecommerce-event-dispatcher-service/event-dispatcher-service.env
    build:
      context: .
      secrets:
        - GITHUB_TOKEN
      args:
        ECOMMERCE_EVENT_DISPATCHER_COMMIT_SHA: ${ECOMMERCE_EVENT_DISPATCHER_COMMIT_SHA}
      dockerfile: pagopa-ecommerce-event-dispatcher-service/Dockerfile.event-dispatcher-service
    ports:
        - "${ECOMMERCE_EVENT_DISPATCHER_PORT}:9000"
    networks:
      - pagopa-ecommerce-net
    depends_on:
      mongo-init:
        condition: service_completed_successfully

  pagopa-ecommerce-helpdesk-commands-service:
    container_name: pagopa-ecommerce-helpdesk-commands-service
    env_file: pagopa-ecommerce-helpdesk-commands-service/helpdesk-commands-service.env
    build:
      context: .
      secrets:
        - GITHUB_TOKEN
      args:
        ECOMMERCE_HELPDESK_COMMANDS_COMMIT_SHA: ${ECOMMERCE_HELPDESK_COMMANDS_COMMIT_SHA}
      dockerfile: pagopa-ecommerce-helpdesk-commands-service/Dockerfile.helpdesk-commands-service
    ports:
        - "${ECOMMERCE_HELPDESK_COMMANDS_PORT}:8080"
    networks:
      - pagopa-ecommerce-net
    depends_on:
      mongo-init:
        condition: service_completed_successfully

  pagopa-ecommerce-user-stats-service:
    container_name: pagopa-ecommerce-user-stats-service
    env_file: pagopa-ecommerce-user-stats-service/user-stats-service.env
    build:
      context: .
      args:
        ECOMMERCE_USER_STATS_COMMIT_SHA: ${ECOMMERCE_USER_STATS_COMMIT_SHA}
      dockerfile: pagopa-ecommerce-user-stats-service/Dockerfile.user-stats-service
    ports:
        - "${ECOMMERCE_USER_STATS_PORT}:8080"
    networks:
      - pagopa-ecommerce-net
    depends_on:
      mongo-init:
        condition: service_completed_successfully

  pagopa-gec-mock:
    build:
      context: .
      dockerfile: gec-mock/Dockerfile.gec-mock
    container_name: pagopa-GEC-mock
    volumes:
      - type: bind
        source: ./gec-mock
        target: /config
        read_only: true
    ports:
      - "${AFM_PORT}:3000"
    networks:
      - pagopa-ecommerce-net

  pagopa-npg-mock:
    build:
      context: .
      dockerfile: npg-mock/Dockerfile.npg-mock
    container_name: pagopa-NPG-mock
    volumes:
      - type: bind
        source: ./npg-mock
        target: /config
        read_only: true
    ports:
      - "${NPG_PORT}:3000"
    networks:
      - pagopa-ecommerce-net

  pagopa-psp-mock:
    build:
      context: .
      dockerfile: psp-mock/Dockerfile.psp-mock
    volumes:
      - type: bind
        source: ./psp-mock
        target: /config
        read_only: true
    ports:
      - "${PSP_MOCK_PORT}:3000"
    networks:
      - pagopa-ecommerce-net

  pagopa-wallet-mock:
    build:
      context: .
      dockerfile: wallet-mock/Dockerfile.wallet-mock
    container_name: pagopa-wallet-mock
    volumes:
      - type: bind
        source: ./wallet-mock
        target: /config
        read_only: true
    ports:
      - "${WALLET_PORT}:3000"
    networks:
      - pagopa-ecommerce-net

  pagopa-notifications-service:
    container_name: pagopa-notifications-service
    build:
      context: .
      args:
        NOTIFICATIONS_SERVICE_COMMIT_SHA: ${NOTIFICATIONS_SERVICE_COMMIT_SHA}
      dockerfile: pagopa-notifications-service/Dockerfile.notifications-service
    env_file: pagopa-notifications-service/notifications-service.env
    ports:
      - "${NOTIFICATIONS_SERVICE_PORT}:3000"
    networks:
      - pagopa-ecommerce-net
    depends_on:
      azurite-init:
        condition: service_completed_successfully

  pagopa-ecommerce-payment-requests-service:
    container_name: pagopa-ecommerce-payment-requests-service
    env_file: pagopa-ecommerce-payment-requests-service/payment-requests-service.env
    build:
      context: .
      secrets:
        - GITHUB_TOKEN
      args:
        ECOMMERCE_PAYMENT_REQUESTS_COMMIT_SHA: ${ECOMMERCE_PAYMENT_REQUESTS_COMMIT_SHA}
      dockerfile: pagopa-ecommerce-payment-requests-service/Dockerfile.payment-requests-service
    ports:
      - "${ECOMMERCE_PAYMENT_REQUESTS_PORT}:8080"
    networks:
      - pagopa-ecommerce-net

  pagopa-ecommerce-transactions-scheduler-service:
    container_name: pagopa-ecommerce-transactions-scheduler-service
    env_file: pagopa-ecommerce-transactions-scheduler-service/transactions-scheduler-service.env
    build:
      context: .
      secrets:
        - GITHUB_TOKEN
      args:
        ECOMMERCE_TRANSACTIONS_SCHEDULER_COMMIT_SHA: ${ECOMMERCE_TRANSACTIONS_SCHEDULER_COMMIT_SHA}
      dockerfile: pagopa-ecommerce-transactions-scheduler-service/Dockerfile.transactions-scheduler-service
    ports:
      - "${ECOMMERCE_TRANSACTIONS_SCHEDULER_PORT}:8080"
    networks:
      - pagopa-ecommerce-net
    depends_on:
      mongo-init:
        condition: service_completed_successfully

  pagopa-ecommerce-cdc-service:
    container_name: pagopa-ecommerce-cdc-service
    env_file: pagopa-ecommerce-cdc-service/ecommerce-cdc-service.env
    build:
      context: .
      secrets:
        - GITHUB_TOKEN
      dockerfile: pagopa-ecommerce-cdc-service/Dockerfile.ecommerce-cdc-service
      args:
        ECOMMERCE_CDC_COMMIT_SHA: ${ECOMMERCE_CDC_COMMIT_SHA}
    ports:
      - "${ECOMMERCE_CDC_PORT}:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - pagopa-ecommerce-net
    depends_on:
      mongo-init:
        condition: service_completed_successfully
      redis:
        condition: service_started

  traefik:
    container_name: pagopa-ecommerce-traefik
    image: traefik:v2.7
    ports:
      - "8000:80"
      - "8090:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $PWD/traefik_conf:/etc/traefik
      - $PWD/traefik_logs:/traefik_logs
    networks:
      - pagopa-ecommerce-net

  storage:
    image: mcr.microsoft.com/azure-storage/azurite:3.34.0
    container_name: azurite
    command: ["azurite", "--blobHost", "0.0.0.0", "--queueHost", "0.0.0.0", "--tableHost", "0.0.0.0", "--skipApiVersionCheck"]
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    volumes:
      - ./.data:/opt/azurite/folder
    networks:
      - pagopa-ecommerce-net

  pagopa-pdv-mock:
    container_name: pagopa-pdv-mock
    build:
      context: .
      dockerfile: pagopa-personal-data-vault-tokenizer/Dockerfile.pdv
    ports:
      - "${PDV_MOCK_PORT}:8080"
    networks:
      - pagopa-ecommerce-net
  
  pagopa-jwt-issuer-mock:
    build:
      context: .
      dockerfile: pagopa-jwt-issuer-mock/Dockerfile.jwt-issuer-mock
    volumes:
      - type: bind
        source: ./pagopa-jwt-issuer-mock
        target: /config
        read_only: true
    ports:
      - "${JWT_ISSUER_MOCK_PORT}:3000"
    networks:
      - pagopa-ecommerce-net
  
  azurite-init:
    container_name: azurite-init
    build:
      context: .
      dockerfile: azurite-init/Dockerfile.azurite-init
    depends_on:
      - storage
    volumes:
      - $PWD:/env-files
    networks:
      - pagopa-ecommerce-net

networks:
  pagopa-ecommerce-net:
    name: pagopa-ecommerce-net
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450

secrets:
  GITHUB_TOKEN:
    environment: GITHUB_TOKEN
