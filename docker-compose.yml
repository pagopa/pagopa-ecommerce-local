version: "3.9"

services:
 
  mongo:
    container_name: pagopa-ecommerce-mongo
    image: mongo
    env_file: mongodb/mongodb.env
    ports:
      - "${MONGO_PORT}:27017"
    networks:
      - pagopa-ecommerce-net
    healthcheck:
      test: echo "db.stats().ok" | mongo --quiet
      interval: 10s

  mongo-express:
    container_name: pagopa-ecommerce-mongo-express
    image: mongo-express
    env_file: mongodb/mongo-express.env
    ports:
      - "${MONGO_EXPRESS_PORT}:8081"
    networks:
      - pagopa-ecommerce-net
    depends_on:
      mongo:
        condition: service_healthy

  redis:
    container_name: pagopa-ecommerce-redis
    image: redis
    command: ["sh", "-c", 'exec redis-server --requirepass "$$REDIS_PASSWORD"']
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - pagopa-ecommerce-net

  redis-insight:
    container_name: pagopa-ecommerce-redis-insight
    image: redislabs/redisinsight
    ports:
      - "${REDIS_INSIGHT_PORT}:8001"
    networks:
      - pagopa-ecommerce-net

  pagopa-node-mock:
    container_name: pagopa-node-mock
    build:
      context: .
      args:
        NODO_MOCK_COMMIT_SHA: ${NODO_MOCK_COMMIT_SHA}
      dockerfile: nodo-mock/Dockerfile.nodo-mock
    env_file: nodo-mock/nodo-mock.env
    ports:
        - "${NODO_MOCK_PORT}:3002"
    networks:
      - pagopa-ecommerce-net    

  pagopa-ecommerce-sessions-service:
    container_name: pagopa-ecommerce-sessions-service
    env_file: pagopa-ecommerce-sessions-service/sessions-service.env
    build:
      context: .
      dockerfile: pagopa-ecommerce-sessions-service/Dockerfile.sessions-service
    ports:
        - "${ECOMMERCE_SESSIONS_PORT}:8080"
    networks:
      - pagopa-ecommerce-net

  pagopa-ecommerce-transactions-service:
    container_name: pagopa-ecommerce-transactions-service
    env_file: pagopa-ecommerce-transactions-service/transactions-service.env
    build:
      context: .
      dockerfile: pagopa-ecommerce-transactions-service/Dockerfile.transactions-service
    ports:
        - "${ECOMMERCE_TRANSACTIONS_PORT}:8080"
    networks:
      - pagopa-ecommerce-net

  pagopa-ecommerce-payment-instruments-service:
    container_name: pagopa-ecommerce-payment-instruments-service
    env_file: pagopa-ecommerce-payment-instruments-service/payment-instruments-service.env
    build:
      context: .
      dockerfile: pagopa-ecommerce-payment-instruments-service/Dockerfile.payment-instruments-service
    ports:
        - "${ECOMMERCE_PAYMENT_INSTRUMENTS_PORT}:8080"
    networks:
      - pagopa-ecommerce-net

  pagopa-api-config-mock:
    container_name: pagopa-api-config-mock
    build:
      context: .
      dockerfile: api-config-mock/Dockerfile.api-config-mock
    volumes:
      - type: bind
        source: ./api-config-mock
        target: /config
        read_only: true
    ports:
      - "${APICONFIG_PORT}:3000"
    networks:
      - pagopa-ecommerce-net

  traefik:
    container_name: pagopa-ecommerce-traefik
    image: traefik:v2.7
    ports:
      - "8000:80"
      - "8090:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $PWD/traefik_conf:/etc/traefik
      - $PWD/traefik_logs:/traefik_logs
    networks:
      - pagopa-ecommerce-net

networks:
  pagopa-ecommerce-net:
    name: pagopa-ecommerce-net
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450
