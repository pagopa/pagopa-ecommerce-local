version: "3.9"

services:

  mongo:
    container_name: pagopa-ecommerce-mongo
    image: mongo
    env_file: mongodb/mongodb.env
    ports:
      - "${MONGO_PORT}:27017"
    networks:
      - pagopa-ecommerce-net
    healthcheck:
      test: echo "db.stats().ok" | mongo --quiet
      interval: 10s

  mongo-express:
    container_name: pagopa-ecommerce-mongo-express
    image: mongo-express
    env_file: mongodb/mongo-express.env
    ports:
      - "${MONGO_EXPRESS_PORT}:8081"
    networks:
      - pagopa-ecommerce-net
    depends_on:
      - mongo

  redis:
    container_name: pagopa-ecommerce-redis
    image: redis
    command: ["sh", "-c", 'exec redis-server --requirepass "$$REDIS_PASSWORD"']
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - pagopa-ecommerce-net

  redis-insight:
    container_name: pagopa-ecommerce-redis-insight
    image: redislabs/redisinsight
    ports:
      - "${REDIS_INSIGHT_PORT}:8001"
    networks:
      - pagopa-ecommerce-net

  pagopa-node-mock:
    container_name: pagopa-node-mock
    build:
      context: .
      args:
        NODO_MOCK_COMMIT_SHA: ${NODO_MOCK_COMMIT_SHA}
      dockerfile: nodo-mock/Dockerfile.nodo-mock
    env_file: nodo-mock/nodo-mock.env
    ports:
        - "${NODO_MOCK_PORT}:3002"
    networks:
      - pagopa-ecommerce-net    

  pagopa-ecommerce-transactions-service:
    container_name: pagopa-ecommerce-transactions-service
    env_file: pagopa-ecommerce-transactions-service/transactions-service.env
    build:
      context: .
      args:
        ECOMMERCE_TRANSACTIONS_COMMIT_SHA: ${ECOMMERCE_TRANSACTIONS_COMMIT_SHA}
      dockerfile: pagopa-ecommerce-transactions-service/Dockerfile.transactions-service
    ports:
        - "${ECOMMERCE_TRANSACTIONS_PORT}:8080"
    networks:
      - pagopa-ecommerce-net

  pagopa-ecommerce-payment-methods-service:
    container_name: pagopa-ecommerce-payment-methods-service
    env_file: pagopa-ecommerce-payment-methods-service/payment-methods-service.env
    build:
      context: .
      args:
        ECOMMERCE_PAYMENT_METHODS_COMMIT_SHA: ${ECOMMERCE_PAYMENT_METHODS_COMMIT_SHA}
      dockerfile: pagopa-ecommerce-payment-methods-service/Dockerfile.payment-methods-service
    ports:
        - "${ECOMMERCE_PAYMENT_METHODS_PORT}:8080"
    networks:
      - pagopa-ecommerce-net

  pagopa-ecommerce-event-dispatcher-service:
    container_name: pagopa-ecommerce-event-dispatcher-service
    env_file: pagopa-ecommerce-event-dispatcher-service/event-dispatcher-service.env
    build:
      context: .
      args:
        ECOMMERCE_EVENT_DISPATCHER_COMMIT_SHA: ${ECOMMERCE_EVENT_DISPATCHER_COMMIT_SHA}
      dockerfile: pagopa-ecommerce-event-dispatcher-service/Dockerfile.event-dispatcher-service
    ports:
        - "${ECOMMERCE_EVENT_DISPATCHER_PORT}:8080"
    networks:
      - pagopa-ecommerce-net

  pagopa-gec-mock:
    build:
      context: .
      dockerfile: gec-mock/Dockerfile.gec-mock
    container_name: pagopa-GEC-mock
    volumes:
      - type: bind
        source: ./gec-mock
        target: /config
        read_only: true
    ports:
      - "${AFM_PORT}:3000"
    networks:
      - pagopa-ecommerce-net

  pagopa-notifications-service:
    container_name: pagopa-notifications-service
    build:
      context: .
      args:
        NOTIFICATIONS_SERVICE_COMMIT_SHA: ${NOTIFICATIONS_SERVICE_COMMIT_SHA}
      dockerfile: pagopa-notifications-service/Dockerfile.notifications-service
    env_file: pagopa-notifications-service/notifications-service.env
    ports:
      - "${NOTIFICATIONS_SERVICE_PORT}:3000"
    networks:
      - pagopa-ecommerce-net

  pagopa-ecommerce-payment-requests-service:
    container_name: pagopa-ecommerce-payment-requests-service
    env_file: pagopa-ecommerce-payment-requests-service/payment-requests-service.env
    build:
      context: .
      args:
        ECOMMERCE_PAYMENT_REQUESTS_COMMIT_SHA: ${ECOMMERCE_PAYMENT_REQUESTS_COMMIT_SHA}
      dockerfile: pagopa-ecommerce-payment-requests-service/Dockerfile.payment-requests-service
    ports:
      - "${ECOMMERCE_PAYMENT_REQUESTS_PORT}:8080"
    networks:
      - pagopa-ecommerce-net

  pagopa-ecommerce-transactions-scheduler-service:
    container_name: pagopa-ecommerce-transactions-scheduler-service
    env_file: pagopa-ecommerce-transactions-scheduler-service/transactions-scheduler-service.env
    build:
      context: .
      args:
        ECOMMERCE_TRANSACTIONS_SCHEDULER_COMMIT_SHA: ${ECOMMERCE_TRANSACTIONS_SCHEDULER_COMMIT_SHA}
      dockerfile: pagopa-ecommerce-transactions-scheduler-service/Dockerfile.transactions-scheduler-service
    ports:
      - "${ECOMMERCE_TRANSACTIONS_SCHEDULER_PORT}:80"
    networks:
      - pagopa-ecommerce-net
  traefik:
    container_name: pagopa-ecommerce-traefik
    image: traefik:v2.7
    ports:
      - "8000:80"
      - "8090:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $PWD/traefik_conf:/etc/traefik
      - $PWD/traefik_logs:/traefik_logs
    networks:
      - pagopa-ecommerce-net

  storage:
    image: mcr.microsoft.com/azure-storage/azurite:3.21.0
    container_name: azurite
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    volumes:
      - ./.data:/opt/azurite/folder
    networks:
      - pagopa-ecommerce-net

  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - pagopa-ecommerce-net
    
  postgres-liquibase:
    container_name: postgres-liquibase
    build:
      context: .
      dockerfile: ./pagopa-payment-transactions-gateway/Dockerfile.postgres-liquibase
    depends_on:
      - postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}  
    networks:
      - pagopa-ecommerce-net

  pagopa-payment-transactions-gateway:
    container_name: pagopa-payment-transactions-gateway
    env_file: pagopa-payment-transactions-gateway/payment-transactions-gateway.env
    build:
      context: .
      dockerfile: pagopa-payment-transactions-gateway/Dockerfile.payment-transactions-gateway
    ports:
        - "${PAYMENT_TRANSACTION_GATEWAY_PORT}:8080"
    depends_on:
      - postgres-liquibase
    networks:
      - pagopa-ecommerce-net

  pagopa-pdv-mock:
    container_name: pagopa-pdv-mock
    build:
      context: .
      dockerfile: pagopa-personal-data-vault-tokenizer/Dockerfile.pdv
    ports:
      - "${PDV_MOCK_PORT}:8080"
    networks:
      - pagopa-ecommerce-net
  
  azurite-init:
    container_name: azurite-init
    build:
      context: .
      dockerfile: azurite-init/Dockerfile.azurite-init
    depends_on:
      - storage
    networks:
      - pagopa-ecommerce-net

networks:
  pagopa-ecommerce-net:
    name: pagopa-ecommerce-net
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450
